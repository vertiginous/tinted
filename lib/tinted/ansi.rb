# Autogenerated from a Treetop grammar. Edits may be lost.


module ANSI
  include Treetop::Runtime

  def root
    @root ||= :text
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_plain_text
      if r2
        r1 = r2
      else
        r3 = _nt_escape_code
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:text][start_index] = r0

    r0
  end

  module EscapeCode0
  end

  def _nt_escape_code
    start_index = index
    if node_cache[:escape_code].has_key?(index)
      cached = node_cache[:escape_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("\e[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\e[")
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_ed
      if r3
        r2 = r3
      else
        r4 = _nt_sgr
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EscapeCode0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:escape_code][start_index] = r0

    r0
  end

  module Ed0
  end

  def _nt_ed
    start_index = index
    if node_cache[:ed].has_key?(index)
      cached = node_cache[:ed][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[012]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('J', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('J')
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(EDNode,input, i0...index, s0)
      r0.extend(Ed0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ed][start_index] = r0

    r0
  end

  module Sgr0
    def number
      elements[0]
    end

  end

  module Sgr1
    def numbers
      elements[0]
    end

  end

  def _nt_sgr
    start_index = index
    if node_cache[:sgr].has_key?(index)
      cached = node_cache[:sgr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s2 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[;]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s2 << r5
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Sgr0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('m', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('m')
        r7 = nil
      end
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SGRNode,input, i0...index, s0)
      r0.extend(Sgr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sgr][start_index] = r0

    r0
  end

  def _nt_plain_text
    start_index = index
    if node_cache[:plain_text].has_key?(index)
      cached = node_cache[:plain_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\e]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:plain_text][start_index] = r0

    r0
  end

end

class ANSIParser < Treetop::Runtime::CompiledParser
  include ANSI
end

